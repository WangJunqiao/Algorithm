//分治法 最近点对
#include<iostream>
#include<algorithm>
#include<cmath>
using namespace std;

#define maxn 100009

struct point{
	double x,y;
}p[maxn];
int index_y[maxn];//存的是按Y排序后的下标

inline double dis(point &a,point &b){
	return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
inline bool cmpx(const point &a,const point &b){
	return a.x<b.x;
}
inline bool cmpy(int a,int b){
	return p[a].y<p[b].y;
}
inline double Min(double a,double b){
	return a<b?a:b;
}
double find(int l,int r){
	if(l+1==r)
		return dis(p[l],p[r]);
	if(l+2==r)
		return Min(dis(p[l],p[l+1]),Min(dis(p[l],p[l+2]),dis(p[l+1],p[l+2])));

	int mid=(l+r)>>1;
	double Mindis=Min(find(l,mid),find(mid+1,r));
	int ind=0;
	for(int i=mid;i>=l && p[mid+1].x-p[i].x<=Mindis;i--)
		index_y[ind++]=i;
	for(int i=mid+1;i<=r && p[i].x-p[mid].x<=Mindis;i++)
		index_y[ind++]=i;
	sort(index_y,index_y+ind,cmpy);
	for(int i=0;i<ind;i++){
		for(int j=i+1;j<ind && p[ index_y[j] ].y-p[ index_y[i] ].y<=Mindis;j++)
			Mindis=Min(Mindis,dis(p[ index_y[j] ],p[ index_y[i] ]));
	}
	return Mindis;
}
int main(){
	int N;
	while(scanf("%d",&N)!=EOF&&N){
		for(int i=0;i<N;i++)
			scanf("%lf%lf",&p[i].x,&p[i].y);
		sort(p,p+N,cmpx);//这个必须在前
		double ans=find(0,N-1);
		printf("%.2lf\n",ans/2.0);
	}
}